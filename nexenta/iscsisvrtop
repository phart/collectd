#!/usr/sbin/dtrace -s

/*
 * This script is a fork of the original iscsisvrtop (1.9) by Richard Elling.
 * The original is published on his GitHub page.
 *    https://github.com/richardelling/tools/blob/master/iscsisvrtop
 *
 * This version implements parseable real time output for use with a wrapper
 * script - specifically for use with collectd EXEC.
 *
 * iscsisvrtop - display top iSCSI I/O events on a server.
 *
 * This is measuring the response time between an incoming iSCSI operation
 * and its response. In general, this measures the servers view of how
 * quickly it can respond to requests. By default, the list shows responses
 * to each client.
 *
 * Top-level fields:
 *	load	1 min load average
 *	read	total KB read during sample
 *	write	total KB sync writes during sample
 *
 * The following per-client and "all" clients fields are shown
 *	Client	IP addr of client
 *	OPS	iSCSI operations per second
 *	Reads	Read operations per second
 *	Writes	Sync write operations per second
 *	NOPS	NOP operations per second
 *	Rd_bw	Read KB/sec
 *	Wr_bw	Sync write KB/sec
 *	ARd_sz	Average read size (KB)
 *	AWr_sz	Average write size (KB)
 *	Rd_t	Average read time in microseconds
 *	Wr_t	Average sync write time in microseconds
 *	Align%	Percentage of read/write operations that have LBA aligned to
 *			blocksize (default=4096 bytes)
 *
 * INSPIRATION:  top(1) by William LeFebvre and iotop by Brendan Gregg
 *
 * Copyright 2012, Richard Elling, All rights reserved.
 * Copyright 2011, Nexenta Systems, Inc. All rights reserved.
 *
 * CDDL HEADER START
 *
 *  The contents of this file are subject to the terms of the
 *  Common Development and Distribution License, Version 1.0 only
 *  (the "License").  You may not use this file except in compliance
 *  with the License.
 *
 *  You can obtain a copy of the license at Docs/cddl1.txt
 *  or http://www.opensolaris.org/os/licensing.
 *  See the License for the specific language governing permissions
 *  and limitations under the License.
 *
 * CDDL HEADER END
 *
 * Author: Richard.Elling@RichardElling.com
 *
 * Revision:
 *   1.9  29-Nov-2012
 */

#pragma D option quiet

/* increase dynvarsize if you get "dynamic variable drops" */
#pragma D option dynvarsize=8m

/*
 * Command line arguments
 */
inline int OPT_blocksize = 8;
inline int OPT_client = 0;
inline int OPT_clear = 0;
inline int OPT_parse = 1;
inline int OPT_top = 0;
inline int INTERVAL	= $1;
inline int COUNTER = -1;
inline int TOP = 0;
inline string CLIENT = "";
inline string CLEAR	= "";

/*
 * Print header
 */
dtrace:::BEGIN
{
    /* starting values */
    counts = COUNTER;
    secs = INTERVAL;
    total_bytes_read = 0;
    total_bytes_write = 0;

	OPT_parse ? 1 : printf("Tracing... Please wait.\n");
}

/*
 * Filter as needed, based on starts
 */
iscsi:::xfer-start,
iscsi:::nop-receive
/OPT_client == 0 || CLIENT == args[0]->ci_remote/
{
    @count_iops[args[0]->ci_remote] = count();
    OPT_client == 0 ? @count_iops["all"] = count() : 1;
    ts[arg1] = timestamp;
}

/*
 * read operations
 */
iscsi:::xfer-done
/ts[arg1] != 0 && args[2]->xfer_type == 0/
{
    t = timestamp - ts[arg1];
    @count_read[args[0]->ci_remote] = count();
    OPT_client == 0 ? @count_read["all"] = count() : 1;
    @avgtime_read[args[0]->ci_remote] = avg(t);
    OPT_client == 0 ? @avgtime_read["all"] = avg(t) : 1;
    @bytes_read[args[0]->ci_remote] = sum(args[2]->xfer_len);
    OPT_client == 0 ? @bytes_read["all"] = sum(args[2]->xfer_len) : 1;
    @avg_bytes_read[args[0]->ci_remote] = avg(args[2]->xfer_len);
    OPT_client == 0 ? @avg_bytes_read["all"] = avg(args[2]->xfer_len) : 1;
    total_bytes_read += args[2]->xfer_len;
    ts[arg1] = 0;
}

/*
 * write operations
 */
iscsi:::xfer-done
/ts[arg1] != 0 && args[2]->xfer_type == 1/
{
    t = timestamp - ts[arg1];
    @count_write[args[0]->ci_remote] = count();
    OPT_client == 0 ? @count_write["all"] = count() : 1;
    @avgtime_write[args[0]->ci_remote] = avg(t);
    OPT_client == 0 ? @avgtime_write["all"] = avg(t) : 1;
    @bytes_write[args[0]->ci_remote] = sum(args[2]->xfer_len);
    OPT_client == 0 ? @bytes_write["all"] = sum(args[2]->xfer_len) : 1;
    @avg_bytes_write[args[0]->ci_remote] = avg(args[2]->xfer_len);
    OPT_client == 0 ? @avg_bytes_write["all"] = avg(args[2]->xfer_len) : 1;
    total_bytes_write += args[2]->xfer_len;
    @avg_aligned[args[0]->ci_remote] =
    avg((args[2]->xfer_loffset % OPT_blocksize) ? 0 : 100);
    ts[arg1] = 0;
}

/*
 * nops are ops too!
 */
iscsi:::nop-send
/ts[arg1] != 0/
{
    t = timestamp - ts[arg1];
    @count_nop[args[0]->ci_remote] = count();
    OPT_client == 0 ? @count_nop["all"] = count() : 1;
    @avgtime_nop[args[0]->ci_remote] = avg(t);
    OPT_client == 0 ? @avgtime_nop["all"] = avg(t) : 1;
    ts[arg1] = 0;
}

/*
 * timer
 */
profile:::tick-1sec
{
    secs--;
}

/*
 * normalize data
 */
profile:::tick-1sec
/secs == 0/
{
    /* fetch 1 min load average */
    self->load1a  = `hp_avenrun[0] / 65536;
    self->load1b  = ((`hp_avenrun[0] % 65536) * 100) / 65536;

    /* convert counters to Kbytes */
    total_bytes_read /= 1024;
    total_bytes_write /= 1024;

    /* normalize to seconds giving a rate */
    /* todo: this should be measured, not based on the INTERVAL */
    normalize(@count_iops, INTERVAL);
    normalize(@count_read, INTERVAL);
    normalize(@count_write, INTERVAL);
    normalize(@count_nop, INTERVAL);

    /* normalize to KB per second */
    normalize(@bytes_read, 1024 * INTERVAL);
    normalize(@avg_bytes_read, 1024 * INTERVAL);
    normalize(@bytes_write, 1024 * INTERVAL);
    normalize(@avg_bytes_write, 1024 * INTERVAL);

    /* normalize average to microseconds */
    normalize(@avgtime_read, 1000);
    normalize(@avgtime_write, 1000);
    normalize(@avgtime_nop, 1000);
}

/*
 * print parseable
 */
profile:::tick-1sec
/secs == 0 && OPT_parse == 1/
{
    wts = (walltimestamp / 1000000000);
    printf("time,%d\n", wts);

	printf("gauge-total-load,%d.%02d\n", self->load1a, self->load1b);
    printf("gauge-total-read_b,%d\n", total_bytes_read);
    printf("gague-total-write_b,%d\n", total_bytes_write);

	/* truncate to top lines if needed */
	OPT_top ? trunc(@count_iops, TOP) : 1;

	printa("gauge-%s-iops,%@d\n", @count_iops);
    printa("gauge-%s-reads,%@d\n", @count_read);
    printa("gauge-%s-writes,%@d\n", @count_write);
    printa("gauge-%s-nops,%@d\n", @count_nop);
	printa("gauge-%s-read_b,%@d\n", @bytes_read);
    printa("gauge-%s-write_b,%@d\n", @bytes_write);
    printa("gauge-%s-read_b_avg,%@d\n", @avg_bytes_read);
    printa("gauge-%s-write_b_avg,%@d\n", @avg_bytes_write);
	printa("gauge-%s-read_t_avg,%@d\n", @avgtime_read);
    printa("gauge-%s-write_t_avg,%@d\n", @avgtime_write);
    printa("gauge-%s-nop_t_avg,%@d\n", @avgtime_nop);
    printa("gauge-%s-aligned,%@d\n", @avg_aligned);
}

/*
 * print standard
 */
profile:::tick-1sec
/secs == 0 && OPT_parse == 0/
{
	/* print status */
	OPT_clear ? printf("%s", CLEAR) : 1;

	printf("%Y load: %d.%02d read_KB: %d write_KB: %d\n",
		walltimestamp, self->load1a, self->load1b,
		total_bytes_read, total_bytes_write);

	/* print headers */
	printf("%-15s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\t%7s\n",
		"client", "ops", "reads", "writes", "nops", "rd_bw", "wr_bw",
		"ard_sz", "awr_sz", "rd_t", "wr_t", "nop_t", "align%");

	/* truncate to top lines if needed */
	OPT_top ? trunc(@count_iops, TOP) : 1;

	printa("%-15s\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\t%7@d\n",
		@count_iops, @count_read, @count_write, @count_nop,
		@bytes_read, @bytes_write, @avg_bytes_read, @avg_bytes_write,
		@avgtime_read, @avgtime_write, @avgtime_nop, @avg_aligned);
}

/*
 * clear data
 */
profile:::tick-1sec
/secs == 0/
{
    /* clear data */
    trunc(@count_iops); trunc(@count_read); trunc(@count_write);
    trunc(@count_nop); trunc(@bytes_read); trunc(@bytes_write);
    trunc(@avg_bytes_read); trunc(@avg_bytes_write);
    trunc(@avgtime_read); trunc(@avgtime_write); trunc(@avgtime_nop);
    trunc(@avg_aligned);
    total_bytes_read = 0;
    total_bytes_write = 0;
    secs = INTERVAL;
    counts--;
}

/*
 * end of program
 */
profile:::tick-1sec
/counts == 0/
{
    exit(0);
}

/*
 * clean up when interrupted
 */
dtrace:::END
{
    trunc(@count_iops); trunc(@count_read); trunc(@count_write);
    trunc(@count_nop); trunc(@bytes_read); trunc(@bytes_write);
    trunc(@avg_bytes_read); trunc(@avg_bytes_write);
    trunc(@avgtime_read); trunc(@avgtime_write); trunc(@avgtime_nop);
    trunc(@avg_aligned);
}
